# src/ui/vulnerability_view.py
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QFrame, QTableWidget, QTableWidgetItem, QHeaderView,
                             QPushButton, QComboBox, QLineEdit, QMenu, QAction,
                             QToolButton, QSplitter, QTabWidget, QTextEdit,
                             QMessageBox, QListWidget, QListWidgetItem)
from PySide6.QtCore import Qt, Signal, Slot, QSize
from PySide6.QtGui import QFont, QIcon, QColor

import os
import json
from datetime import datetime


class VulnerabilityViewWidget(QWidget):
    """Widget for displaying and managing vulnerabilities"""
    
    def __init__(self, config=None):
        super().__init__()
        
        self.config = config or {}
        self.selected_vulnerability = None
        
        # Create layout
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(20, 20, 20, 20)
        self.main_layout.setSpacing(20)
        
        # Create toolbar
        self._create_toolbar()
        
        # Create splitter
        self.splitter = QSplitter(Qt.Vertical)
        self.main_layout.addWidget(self.splitter)
        
        # Create vulnerabilities table
        self._create_vulnerabilities_table()
        
        # Create vulnerability details
        self._create_vulnerability_details()
        
        # Set initial splitter sizes
        self.splitter.setSizes([400, 400])
    
    def _create_toolbar(self):
        """Create the toolbar"""
        toolbar_layout = QHBoxLayout()
        
        # Search box
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Search vulnerabilities...")
        self.search_box.setClearButtonEnabled(True)
        self.search_box.setMinimumWidth(300)
        self.search_box.textChanged.connect(self._filter_vulnerabilities)
        toolbar_layout.addWidget(self.search_box)
        
        # Filter dropdown
        self.filter_combo = QComboBox()
        self.filter_combo.addItem("All Vulnerabilities")
        self.filter_combo.addItem("By Severity")
        self.filter_combo.addItem("By CVE ID")
        self.filter_combo.addItem("By Affected Service")
        self.filter_combo.currentIndexChanged.connect(self._update_filter)
        toolbar_layout.addWidget(self.filter_combo)
        
        toolbar_layout.addStretch()
        
        # Update CVE database button
        self.update_cve_button = QPushButton("Update CVE Database")
        self.update_cve_button.clicked.connect(self._update_cve_database)
        toolbar_layout.addWidget(self.update_cve_button)
        
        # Export button
        self.export_button = QPushButton("Export")
        toolbar_layout.addWidget(self.export_button)
        
        # Add to main layout
        self.main_layout.addLayout(toolbar_layout)
    
    def _create_vulnerabilities_table(self):
        """Create the vulnerabilities table"""
        self.vulns_table = QTableWidget()
        self.vulns_table.setColumnCount(7)
        self.vulns_table.setHorizontalHeaderLabels(
            ["CVE ID", "Severity", "CVSS Score", "Description", "Affected Assets", "Status", "Published Date"]
        )
        
        # Configure table appearance
        self.vulns_table.horizontalHeader().setStretchLastSection(True)
        self.vulns_table.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
        self.vulns_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.vulns_table.setSelectionMode(QTableWidget.SingleSelection)
        self.vulns_table.setAlternatingRowColors(True)
        self.vulns_table.setShowGrid(True)
        self.vulns_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #d0d0d0;
                selection-background-color: #e6f3ff;
                selection-color: #000000;
            }
            QHeaderView::section {
                background-color: #f0f0f0;
                padding: 5px;
                border: 1px solid #d0d0d0;
                font-weight: bold;
            }
        """)
        
        # Connect signals
        self.vulns_table.cellClicked.connect(self._on_vulnerability_selected)
        
        # Add to splitter
        self.splitter.addWidget(self.vulns_table)
    
    def _create_vulnerability_details(self):
        """Create the vulnerability details section"""
        self.details_frame = QFrame()
        self.details_frame.setFrameShape(QFrame.StyledPanel)
        self.details_frame.setFrameShadow(QFrame.Raised)
        self.details_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 8px;
            }
        """)
        
        details_layout = QVBoxLayout(self.details_frame)
        
        # Vulnerability title
        self.vuln_title = QLabel("Select a vulnerability to view details")
        self.vuln_title.setStyleSheet("font-size: 16px; font-weight: bold;")
        details_layout.addWidget(self.vuln_title)
        
        # Details tabs
        self.details_tabs = QTabWidget()
        
        # Overview tab
        overview_tab = QWidget()
        overview_layout = QVBoxLayout(overview_tab)
        
        # Description section
        description_label = QLabel("Description:")
        description_label.setStyleSheet("font-weight: bold;")
        overview_layout.addWidget(description_label)
        
        self.description_text = QTextEdit()
        self.description_text.setReadOnly(True)
        self.description_text.setMaximumHeight(100)
        overview_layout.addWidget(self.description_text)
        
        # Details section
        details_grid = QHBoxLayout()
        
        # Left column
        left_column = QVBoxLayout()
        
        severity_label = QLabel("Severity:")
        severity_label.setStyleSheet("font-weight: bold;")
        left_column.addWidget(severity_label)
        
        self.severity_value = QLabel("--")
        left_column.addWidget(self.severity_value)
        
        cvss_label = QLabel("CVSS Score:")
        cvss_label.setStyleSheet("font-weight: bold;")
        left_column.addWidget(cvss_label)
        
        self.cvss_value = QLabel("--")
        left_column.addWidget(self.cvss_value)
        
        details_grid.addLayout(left_column)
        
        # Middle column
        middle_column = QVBoxLayout()
        
        published_label = QLabel("Published Date:")
        published_label.setStyleSheet("font-weight: bold;")
        middle_column.addWidget(published_label)
        
        self.published_value = QLabel("--")
        middle_column.addWidget(self.published_value)
        
        modified_label = QLabel("Last Modified:")
        modified_label.setStyleSheet("font-weight: bold;")
        middle_column.addWidget(modified_label)
        
        self.modified_value = QLabel("--")
        middle_column.addWidget(self.modified_value)
        
        details_grid.addLayout(middle_column)
        
        # Right column
        right_column = QVBoxLayout()
        
        status_label = QLabel("Status:")
        status_label.setStyleSheet("font-weight: bold;")
        right_column.addWidget(status_label)
        
        self.status_value = QLabel("--")
        right_column.addWidget(self.status_value)
        
        cwe_label = QLabel("CWE:")
        cwe_label.setStyleSheet("font-weight: bold;")
        right_column.addWidget(cwe_label)
        
        self.cwe_value = QLabel("--")
        right_column.addWidget(self.cwe_value)
        
        details_grid.addLayout(right_column)
        
        overview_layout.addLayout(details_grid)
        
        # References section
        references_label = QLabel("References:")
        references_label.setStyleSheet("font-weight: bold;")
        overview_layout.addWidget(references_label)
        
        self.references_list = QListWidget()
        self.references_list.setMaximumHeight(100)
        overview_layout.addWidget(self.references_list)
        
        overview_layout.addStretch()
        
        # Add overview tab
        self.details_tabs.addTab(overview_tab, "Overview")
        
        # Affected Assets tab
        assets_tab = QWidget()
        assets_layout = QVBoxLayout(assets_tab)
        
        self.assets_list = QTableWidget()
        self.assets_list.setColumnCount(4)
        self.assets_list.setHorizontalHeaderLabels(
            ["IP Address", "Hostname", "Service", "Port"]
        )
        
        # Configure table appearance
        self.assets_list.horizontalHeader().setStretchLastSection(True)
        self.assets_list.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
        self.assets_list.setAlternatingRowColors(True)
        
        assets_layout.addWidget(self.assets_list)
        
        # Add assets tab
        self.details_tabs.addTab(assets_tab, "Affected Assets")
        
        # Recommendations tab
        recommendations_tab = QWidget()
        recommendations_layout = QVBoxLayout(recommendations_tab)
        
        self.recommendations_text = QTextEdit()
        self.recommendations_text.setReadOnly(True)
        recommendations_layout.addWidget(self.recommendations_text)
        
        # Add recommendations tab
        self.details_tabs.addTab(recommendations_tab, "Recommendations")
        
        # Add tabs to layout
        details_layout.addWidget(self.details_tabs)
        
        # Add to splitter
        self.splitter.addWidget(self.details_frame)
    
    def _load_dummy_data(self):
        """Load dummy data for demonstration"""
        # Clear existing data
        self.vulns_table.setRowCount(0)
        
        # Sample data
        vulnerabilities = [
            {
                "cve_id": "CVE-2021-44228",
                "severity": "Critical",
                "cvss_score": 10.0,
                "description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints.",
                "affected_assets": 5,
                "status": "Active",
                "published_date": "2021-12-10",
                "last_modified": "2022-05-03",
                "cwe": "CWE-20: Improper Input Validation",
                "references": [
                    "https://logging.apache.org/log4j/2.x/security.html",
                    "https://www.lunasec.io/docs/blog/log4j-zero-day/",
                    "https://www.cisa.gov/uscert/ncas/alerts/aa21-356a"
                ],
                "affected_assets_list": [
                    {"ip_address": "192.168.1.10", "hostname": "webserver", "service": "Apache Tomcat", "port": 8080},
                    {"ip_address": "192.168.1.12", "hostname": "app-server", "service": "Java Application", "port": 8000},
                    {"ip_address": "192.168.1.15", "hostname": "jenkins", "service": "Jenkins", "port": 8080},
                    {"ip_address": "192.168.1.18", "hostname": "monitoring", "service": "Grafana", "port": 3000},
                    {"ip_address": "192.168.1.22", "hostname": "elasticsearch", "service": "Elasticsearch", "port": 9200}
                ],
                "recommendations": "### Remediation Steps for Log4Shell (CVE-2021-44228)\n\n"
                                  "1. **Update Log4j Library**:\n"
                                  "   - For all Java applications, update Log4j to version 2.15.0 or later.\n\n"
                                  "2. **Apply Mitigations If Updating Is Not Immediately Possible**:\n"
                                  "   - For Log4j 2.10 or later: Set system property `-Dlog4j2.formatMsgNoLookups=true`\n"
                                  "   - For Log4j 2.0-beta9 to 2.10.0: Remove the JndiLookup class from the classpath: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`\n\n"
                                  "3. **Network Security Measures**:\n"
                                  "   - Implement egress network filtering to block outbound connections to LDAP, RMI, and DNS services\n"
                                  "   - Deploy WAF rules to detect and block exploitation attempts\n\n"
                                  "4. **Monitoring**:\n"
                                  "   - Monitor for exploitation attempts in logs\n"
                                  "   - Look for suspicious outbound connections\n\n"
                                  "5. **Verify Third-Party Applications**:\n"
                                  "   - Contact vendors to ensure their products have been patched\n"
                                  "   - Apply available vendor patches immediately"
            },
            {
                "cve_id": "CVE-2021-3156",
                "severity": "High",
                "cvss_score": 7.8,
                "description": "Sudo before 1.9.5p2 contains a heap-based buffer overflow that allows local users to gain root privileges.",
                "affected_assets": 8,
                "status": "Active",
                "published_date": "2021-01-26",
                "last_modified": "2021-02-03",
                "cwe": "CWE-122: Heap-based Buffer Overflow",
                "references": [
                    "https://www.sudo.ws/alerts/unescape_overflow.html",
                    "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3156",
                    "https://blog.qualys.com/vulnerabilities-threat-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit"
                ],
                "affected_assets_list": [
                    {"ip_address": "192.168.1.5", "hostname": "server01", "service": "sudo", "port": 0},
                    {"ip_address": "192.168.1.10", "hostname": "webserver", "service": "sudo", "port": 0},
                    {"ip_address": "192.168.1.12", "hostname": "app-server", "service": "sudo", "port": 0}
                ],
                "recommendations": "### Remediation Steps for Sudo Heap-Based Buffer Overflow (CVE-2021-3156)\n\n"
                                  "1. **Update Sudo Package**:\n"
                                  "   - Update sudo to version 1.9.5p2 or later using your system's package manager\n"
                                  "   - For Ubuntu/Debian: `apt update && apt upgrade sudo`\n"
                                  "   - For RHEL/CentOS: `yum update sudo`\n\n"
                                  "2. **Verify Update**:\n"
                                  "   - Check installed sudo version with `sudo -V`\n"
                                  "   - Ensure the version is 1.9.5p2 or later\n\n"
                                  "3. **If Update Is Not Possible**:\n"
                                  "   - Restrict sudo access to only essential users\n"
                                  "   - Consider implementing compensating controls\n\n"
                                  "4. **Security Best Practices**:\n"
                                  "   - Follow the principle of least privilege when configuring sudo\n"
                                  "   - Implement sudo logging and monitoring\n"
                                  "   - Regularly review sudo configurations"
            }
        ]
        
        # Add vulnerabilities to table
        for vuln in vulnerabilities:
            row = self.vulns_table.rowCount()
            self.vulns_table.insertRow(row)
            
            # Set data
            self.vulns_table.setItem(row, 0, QTableWidgetItem(vuln["cve_id"]))
            
            # Set severity with color
            severity_item = QTableWidgetItem(vuln["severity"])
            if vuln["severity"] == "Critical":
                severity_item.setForeground(QColor("#c0392b"))
            elif vuln["severity"] == "High":
                severity_item.setForeground(QColor("#e74c3c"))
            elif vuln["severity"] == "Medium":
                severity_item.setForeground(QColor("#f39c12"))
            elif vuln["severity"] == "Low":
                severity_item.setForeground(QColor("#2ecc71"))
            self.vulns_table.setItem(row, 1, severity_item)
            
            self.vulns_table.setItem(row, 2, QTableWidgetItem(str(vuln["cvss_score"])))
            
            # Truncate description for table
            desc = vuln["description"]
            if len(desc) > 100:
                desc = desc[:97] + "..."
            self.vulns_table.setItem(row, 3, QTableWidgetItem(desc))
            
            self.vulns_table.setItem(row, 4, QTableWidgetItem(str(vuln["affected_assets"])))
            self.vulns_table.setItem(row, 5, QTableWidgetItem(vuln["status"]))
            self.vulns_table.setItem(row, 6, QTableWidgetItem(vuln["published_date"]))
            
            # Store full vulnerability data
            self.vulns_table.item(row, 0).setData(Qt.UserRole, vuln)
    
    def _filter_vulnerabilities(self):
        """Filter vulnerabilities by search text"""
        search_text = self.search_box.text().lower()
        
        for row in range(self.vulns_table.rowCount()):
            match = False
            
            # Check each column for a match
            for col in range(self.vulns_table.columnCount()):
                item = self.vulns_table.item(row, col)
                if item and search_text in item.text().lower():
                    match = True
                    break
            
            # Show/hide row based on match
            self.vulns_table.setRowHidden(row, not match)
    
    def _update_filter(self, index):
        """Update filter based on combo box selection"""
        # Reset search first
        self.search_box.clear()
        
        # Show all rows
        for row in range(self.vulns_table.rowCount()):
            self.vulns_table.setRowHidden(row, False)
        
        # Update placeholder text based on filter
        if index == 0:  # All Vulnerabilities
            self.search_box.setPlaceholderText("Search vulnerabilities...")
        elif index == 1:  # By Severity
            self.search_box.setPlaceholderText("Search by severity...")
        elif index == 2:  # By CVE ID
            self.search_box.setPlaceholderText("Search by CVE ID...")
        elif index == 3:  # By Affected Service
            self.search_box.setPlaceholderText("Search by affected service...")
    
    def _on_vulnerability_selected(self, row, column):
        """Handle vulnerability selection in the table"""
        # Get vulnerability data
        vuln_data = self.vulns_table.item(row, 0).data(Qt.UserRole)
        self.selected_vulnerability = vuln_data
        
        # Update vulnerability title
        self.vuln_title.setText(vuln_data["cve_id"])
        
        # Update overview tab
        self.description_text.setPlainText(vuln_data["description"])
        
        # Set severity with color
        severity_text = vuln_data["severity"]
        if severity_text == "Critical":
            self.severity_value.setStyleSheet("color: #c0392b; font-weight: bold;")
        elif severity_text == "High":
            self.severity_value.setStyleSheet("color: #e74c3c; font-weight: bold;")
        elif severity_text == "Medium":
            self.severity_value.setStyleSheet("color: #f39c12; font-weight: bold;")
        elif severity_text == "Low":
            self.severity_value.setStyleSheet("color: #2ecc71; font-weight: bold;")
        else:
            self.severity_value.setStyleSheet("color: #333333;")
        self.severity_value.setText(severity_text)
        
        self.cvss_value.setText(str(vuln_data["cvss_score"]))
        self.published_value.setText(vuln_data["published_date"])
        self.modified_value.setText(vuln_data.get("last_modified", "Unknown"))
        self.status_value.setText(vuln_data["status"])
        self.cwe_value.setText(vuln_data.get("cwe", "Not specified"))
        
        # Update references list
        self.references_list.clear()
        for ref in vuln_data.get("references", []):
            self.references_list.addItem(ref)
        
        # Update affected assets tab
        self.assets_list.setRowCount(0)
        for asset in vuln_data.get("affected_assets_list", []):
            row = self.assets_list.rowCount()
            self.assets_list.insertRow(row)
            
            self.assets_list.setItem(row, 0, QTableWidgetItem(asset["ip_address"]))
            self.assets_list.setItem(row, 1, QTableWidgetItem(asset["hostname"]))
            self.assets_list.setItem(row, 2, QTableWidgetItem(asset["service"]))
            self.assets_list.setItem(row, 3, QTableWidgetItem(str(asset["port"])))
        
        # Update recommendations tab
        self.recommendations_text.setMarkdown(vuln_data.get("recommendations", "No recommendations available."))
    
    def _update_cve_database(self):
        """Update the CVE database"""
        # In a real application, this would trigger an update of the CVE database
        
        # Show a progress dialog
        from PySide6.QtWidgets import QProgressDialog
        progress = QProgressDialog("Updating CVE database...", "Cancel", 0, 100, self)
        progress.setWindowModality(Qt.WindowModal)
        progress.setAutoClose(True)
        progress.setAutoReset(True)
        progress.setValue(0)
        
        # Simulate update process
        for i in range(1, 101):
            progress.setValue(i)
            
            # Process events to keep UI responsive
            from PySide6.QtCore import QCoreApplication
            QCoreApplication.processEvents()
            
            # Simulate work
            time.sleep(0.05)
            
            if progress.wasCanceled():
                QMessageBox.warning(self, "Update Canceled", "CVE database update was canceled.")
                return
        
        # Update complete
        QMessageBox.information(self, "Update Complete", 
                              "CVE database has been updated successfully.")
    
    @Slot()
    def refresh_data(self):
        """Refresh the vulnerabilities data"""
        # In a real implementation, this would fetch data from the database
        self._load_dummy_data()